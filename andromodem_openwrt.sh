#!/bin/sh

APP_NAME="andromodem"
INSTALL_DIR="/opt"
BIN_PATH="$INSTALL_DIR/$APP_NAME"
VERSION_FILE="$INSTALL_DIR/${APP_NAME}.version"
INIT_PATH="/etc/init.d/$APP_NAME"
LUCI_VIEW="/usr/lib/lua/luci/view/${APP_NAME}.htm"
LUCI_CTRL="/usr/lib/lua/luci/controller/${APP_NAME}.lua"
GITHUB_REPO="https://github.com/basiooo/andromodem"
PORT=49153

get_os_arch() {
    os="linux"
    uname_m=$(uname -m)
    case "$uname_m" in
        x86_64 | amd64) arch="amd64" ;;
        i386 | i686)    arch="386" ;;
        aarch64 | arm64) arch="arm64" ;;
        arm*)           arch="arm" ;;
        *)
            echo "‚ùå Unsupported architecture: $uname_m"
            exit 1
            ;;
    esac
    echo "${os}_${arch}"
}

get_latest_version() {
    wget --server-response --spider "${GITHUB_REPO}/releases/latest" 2>&1 \
        | awk '/^  Location: /{gsub(/\r/, "", $2); print $2}' \
        | sed 's|.*/tag/v||'
}

get_local_version() {
    if [ -f "$BIN_PATH" ] && [ -x "$BIN_PATH" ]; then
        version_output=$("$BIN_PATH" --version 2>/dev/null)
        if [ $? -eq 0 ] && echo "$version_output" | grep -q "AndroModem version"; then
            echo "$version_output" | sed 's/AndroModem version //'
        else
            [ -f "$VERSION_FILE" ] && cat "$VERSION_FILE" || echo "unknown"
        fi
    elif [ -f "$VERSION_FILE" ]; then
        cat "$VERSION_FILE"
    else
        echo "unknown"
    fi
}

install_dependencies() {
    echo "üì¶ Updating package index and installing dependencies..."
    opkg update
    opkg install adb wget
}

download_binary() {
    version="$1"
    os_arch=$(get_os_arch)
    api_url="https://api.github.com/repos/basiooo/andromodem/releases/tags/v${version}"

    echo "üîç Checking release assets via GitHub API..."
    asset_url=$(wget -qO- "$api_url" | grep "browser_download_url" | grep "$os_arch" | cut -d '"' -f 4)

    if [ -z "$asset_url" ]; then
        echo "‚ùå No asset found for architecture $os_arch in version v$version."
        exit 1
    fi

    echo "‚¨áÔ∏è  Downloading binary from: $asset_url"
    if wget -O "$BIN_PATH" "$asset_url"; then
        chmod +x "$BIN_PATH"
    else
        echo "‚ùå Failed to download binary."
        exit 1
    fi
}

create_luci_menu() {
    echo "üß© Setting up LuCI menu..."
    mkdir -p /usr/lib/lua/luci/view
    cat << EOF > "$LUCI_VIEW"
<%+header%>
<div class="cbi-map"><br>
<iframe id="andromodem" allowfullscreen style="width: 100%; min-height: 700px; border: none;"></iframe>
</div>
<script type="text/javascript">
document.getElementById("andromodem").src = \`http://\${window.location.hostname}:$PORT\`;
</script>
<%+footer%>
EOF

    mkdir -p /usr/lib/lua/luci/controller
    cat << EOF > "$LUCI_CTRL"
module("luci.controller.$APP_NAME", package.seeall)
function index()
    entry({"admin", "status", "$APP_NAME"}, template("$APP_NAME"), _("Andromodem"), 4).leaf = true
end
EOF
}

create_init_script() {
    echo "üîß Creating init script..."
    cat << EOF > "$INIT_PATH"
#!/bin/sh /etc/rc.common
# Autogenerated for $APP_NAME

USE_PROCD=1
START=99

start_service() {
    procd_open_instance
    procd_set_param command "$BIN_PATH"
    procd_close_instance
}

stop_service() {
    killall $APP_NAME
}
EOF
    chmod 755 "$INIT_PATH"
}

install_andromodem() {
    echo "üìã Checking if $APP_NAME is already installed..."

    if [ -x "$BIN_PATH" ]; then
        echo "‚úÖ $APP_NAME is already installed at $BIN_PATH"
        echo "‚ÑπÔ∏è  To update it, use: $0 update"
        exit 0
    fi

    install_dependencies
    mkdir -p "$INSTALL_DIR"

    latest_version=$(get_latest_version)
    echo "üöÄ Installing $APP_NAME version $latest_version..."

    download_binary "$latest_version"
    echo "$latest_version" > "$VERSION_FILE"

    create_luci_menu
    create_init_script
    /etc/init.d/$APP_NAME enable
    /etc/init.d/$APP_NAME start

    echo "‚úÖ $APP_NAME installed with version $latest_version."
}

update_andromodem() {
    echo "üîÑ Checking if $APP_NAME is installed..."
    if [ ! -x "$BIN_PATH" ]; then
        echo "‚ùå $APP_NAME not found. Please install $APP_NAME first."
        exit 1
    fi

    echo "üîç Checking for update..."
    local_version=$(get_local_version)
    latest_version=$(get_latest_version)

    echo "Local version:  $local_version"
    echo "Latest version: $latest_version"

    if [ "$local_version" = "$latest_version" ]; then
        echo "‚úÖ $APP_NAME is already up to date."
        exit 0
    fi

    echo "‚¨ÜÔ∏è  Updating $APP_NAME..."
    killall "$APP_NAME" 2>/dev/null
    download_binary "$latest_version"
    echo "$latest_version" > "$VERSION_FILE"
    /etc/init.d/$APP_NAME restart
    echo "‚úÖ $APP_NAME updated to version $latest_version."
}

uninstall_andromodem() {
    echo "üóëÔ∏è  Uninstalling $APP_NAME..."

    if [ ! -x "$BIN_PATH" ] && [ ! -f "$INIT_PATH" ] && [ ! -f "$VERSION_FILE" ]; then
        echo "‚ö†Ô∏è  $APP_NAME is not installed."
        exit 0
    fi

    if [ -f "$INIT_PATH" ]; then
        /etc/init.d/$APP_NAME stop 2>/dev/null
        /etc/init.d/$APP_NAME disable 2>/dev/null
    fi

    rm -f "$BIN_PATH" "$INIT_PATH" "$VERSION_FILE" "$LUCI_VIEW" "$LUCI_CTRL"
    echo "‚úÖ $APP_NAME uninstalled."
}

show_menu() {
    echo ""
    echo "üì¶ AndroModem OpenWRT Installer Menu"
    echo "============================"
    echo "1) Install"
    echo "2) Update"
    echo "3) Uninstall"
    echo "4) Reinstall"
    echo "5) Exit"
    echo ""

    read -p "Please select an option [1-5]: " choice
    case "$choice" in
        1) install_andromodem ;;
        2) update_andromodem ;;
        3) uninstall_andromodem ;;
        4) uninstall_andromodem; install_andromodem ;;
        5) echo "üëã Exiting..."; exit 0 ;;
        *) echo "‚ùå Invalid choice."; exit 1 ;;
    esac
}

if [ -z "$1" ]; then
    show_menu
else
    case "$1" in
        install)
            install_andromodem
            ;;
        update)
            update_andromodem
            ;;
        uninstall)
            uninstall_andromodem
            ;;
        reinstall)
            uninstall_andromodem
            install_andromodem
            ;;
        *)
            echo "Usage: $0 {install|update|uninstall|reinstall}"
            exit 1
            ;;
    esac
fi
